buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails:grails-docs:$grailsVersion"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1'
        classpath "org.anarres.jarjar:jarjar-gradle:1.0.0"
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.14.0' apply false
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

version project.projectVersion

ext {
    // commonBuild = "https://raw.githubusercontent.com/grails/grails-common-build/master"
    commonBuild = "https://raw.githubusercontent.com/grails/grails-common-build/4a7cf067b69c02bbfa9fe3d5c14ccc177b51ae59/"
}

subprojects { subproject ->

    version project.projectVersion

    ext {
        userOrg = "grails"
        isGrailsPlugin = false
        isConfiguration = subproject.projectDir.parentFile.name == 'configurations'
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }

    if (subproject.name == "configurations") {
        return
    }

    if(isConfiguration) {
        group "io.micronaut.configuration"
    }
    else {
        group projectGroupId
    }


    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    
    if (subproject.name.startsWith("examples")) {
        // apply plugin:"org.grails.grails-web"
    }
    else {
        apply plugin:"groovy"
        apply plugin:"java"
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        if(!subproject.name.contains('test-suite')) {
            apply from:"${rootProject.rootDir}/gradle/publishing.gradle"
            apply plugin: 'checkstyle'
            
            checkstyle {
                toolVersion = 8.2
                configFile = new File(project.rootDir, 'checkstyle/oracle.xml')
                ignoreFailures = false

                // TODO - We need to turn these down once
                // the current issues are addressed.  Setting
                // high thresholds for now to allow builds to pass
                // until we can prioritize addressing the relevant
                // issues.
                maxErrors = 9_999
                maxWarnings = 9_999
            }
        }
    }

    tasks.withType(Test) {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    configurations {
        documentation
        all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                String group = details.requested.group
                if(group == 'org.codehaus.groovy') {
                    details.useVersion(groovyVersion)
                }
                if(group == 'org.ow2.asm') {
                    details.useVersion(asmVersion)
                }
            }
        }
    }

    dependencies {
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compileOnly([group:'com.github.ben-manes.caffeine',name:'caffeine', version:caffeineVersion])
        testCompile([group:'com.github.ben-manes.caffeine',name:'caffeine', version:caffeineVersion])
        testCompile "org.codehaus.groovy:groovy:$groovyVersion"
        testCompile("org.spockframework:spock-core:${spockVersion}") {
            exclude module:'groovy-all'
        }
        testCompile "cglib:cglib-nodep:2.2.2"
        testCompile "org.objenesis:objenesis:1.4"

        testRuntime "ch.qos.logback:logback-classic:1.2.3"
        testCompile "org.codehaus.groovy:groovy-test:$groovyVersion"
        compileOnly 'org.ow2.asm:asm:5.2'
        compileOnly 'org.ow2.asm:asm-commons:5.2'

        testCompile "org.ow2.asm:asm:$asmVersion"
        testCompile "org.ow2.asm:asm-commons:$asmVersion"
    }

    task allDeps(type: DependencyReportTask) {}
}

apply from:"gradle/docs.gradle"

// IDEA 2017.2 made a breaking change with IDE build output vs gradle build output
// [see https://youtrack.jetbrains.com/issue/IDEA-175172]
// the problem here is the gradle build uses <module-dir>/build/classes/main
// while IDEA uses <module-dir>/out/production/..
// As a result, compiling ast or java-inject module and using the IDEA test runner fails because the
// generated bean classes for injection are in <module-dir>/build, not <module-dir>/out
allprojects {
    apply plugin: 'idea'
    idea {
        module {
            outputDir file('build/classes/java/main')
            testOutputDir file('build/classes/groovy/test')
        }
    }
    apply from: rootProject.file('gradle/license.gradle')
}