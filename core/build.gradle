import org.anarres.gradle.plugin.jarjar.JarjarTask

// this is a hack because of how we replace jarjar'ed JAR need to manually supply dependencies to POM
// Declare all dependencies in this map and not with the dependencies block!
def deps = [
        compile: [
                [group: 'com.googlecode', name: 'openbeans', version: '1.0'],
                [group:'org.reactivestreams', name:'reactive-streams', version:'1.0.1'],
                [group:'com.github.ben-manes.caffeine',name:'caffeine', version:'2.5.0'],
                [group:'com.google.code.findbugs',name:'jsr305',version:'3.0.2']
        ]
]

ext.extraPomInfo = {
    delegate.dependencies {
        for(entry in deps) {
            def scope = entry.key
            def values = entry.value
            for(dep in values) {
                delegate.dependency {
                    def groupId
                    def artifactId
                    def artifactVersion

                    if(dep instanceof Project) {
                        groupId = projectGroupId
                        artifactId = dep.name
                        artifactVersion = version
                    }
                    else {

                        groupId = dep.group
                        artifactId = dep.name
                        artifactVersion = dep.version
                    }

                    delegate.groupId groupId
                    delegate.artifactId artifactId
                    delegate.version artifactVersion
                    delegate.scope scope
                }
            }
        }
    }
}

repositories {
    maven { url 'https://maven.repository.redhat.com/ga/' }
}

dependencies {
    for(entry in deps) {
        def scope = entry.key
        for(dep in entry.value) {
            "$scope"(dep)
        }
    }
}


// ##########################
// JARJAR handling

def asmjar = project.fileTree('src/jarjar')

def targetDir = new File(project.buildDir, "jarjar")
def targetFile = new File(targetDir, "asm.jar")
def asmjarjarTask = task("asmjarjarTask", type: JarjarTask) {
    from(asmjar)
    classRename "org.objectweb.asm.**", "org.particleframework.asm.@1"
    destinationDir = targetDir
    destinationName = targetFile.name
}
asmjarjarTask.inputs.files(asmjar)
asmjarjarTask.outputs.files(targetDir)

def jarjarOutput = task("asmjarjarOutput")
jarjarOutput.doLast {
    copy {
        from(zipTree(targetFile)) {
            include "org/particleframework/asm/**"
        }
        into(new File(project.buildDir, "classes/java/main"))
    }
}
jarjarOutput.dependsOn(asmjarjarTask)
classes {
    dependsOn(jarjarOutput)
}


def jarjarTask = task("jarjarTask", type: JarjarTask) {
    from(project.files(jar.archivePath))
    classRename "org.objectweb.asm.**", "org.particleframework.asm.@1"
    destinationDir = targetDir
    destinationName = targetFile.name
}
jarjarTask.dependsOn(jar)

def jarjarOutputs = task("jarjarOutputs").doLast {
    copy {
        from zipTree(jarjarTask.destinationPath)
        into(targetDir)
    }
    delete(jarjarTask.destinationPath)
}
jarjarOutputs.dependsOn(jarjarTask)
task("rejar", type:Jar, dependsOn: jarjarOutputs) {
    from(targetDir)
    archiveName = "rejar.jar"
}
