import org.anarres.gradle.plugin.jarjar.JarjarTask

// this is a hack because of how we replace jarjar'ed JAR need to manually supply dependencies to POM
// Declare all dependencies in this map and not with the dependencies block!
def deps = [
        compile: [
                [group:'org.reactivestreams', name:'reactive-streams', version:'1.0.1'],
                [group:'com.google.code.findbugs',name:'jsr305',version:'3.0.2']
        ]
]

ext.extraPomInfo = {
    delegate.dependencies {
        for(entry in deps) {
            def scope = entry.key
            def values = entry.value
            for(dep in values) {
                delegate.dependency {
                    def groupId
                    def artifactId
                    def artifactVersion

                    if(dep instanceof Project) {
                        groupId = projectGroupId
                        artifactId = dep.name
                        artifactVersion = version
                    }
                    else {

                        groupId = dep.group
                        artifactId = dep.name
                        artifactVersion = dep.version
                    }

                    delegate.groupId groupId
                    delegate.artifactId artifactId
                    delegate.version artifactVersion
                    delegate.scope scope
                }
            }
        }
    }
}


dependencies {
    for(entry in deps) {
        def scope = entry.key
        for(dep in entry.value) {
            "$scope"(dep)
        }
    }
}


// ##########################
// JARJAR handling
def targetDir = new File(project.buildDir, "jarjar")

// ##########################
// ASM JARJAR handling
def asmDependencies = [
        [group:'org.ow2.asm', name: 'asm', version:asmVersion],
        [group:'org.ow2.asm', name: 'asm-commons', version:asmVersion],
        [group:'org.ow2.asm', name: 'asm-tree', version:asmVersion]

]
Task taskAsmDownload = buildDownloadTask("asm", asmDependencies, asmVersion)
buildJarJarTask(targetDir, taskAsmDownload, "asm", ["org.objectweb.asm": "io.micronaut.asm"])


// ##########################
// Caffeine JARJAR handling
def caffeineDependencies = [
        [group:'com.github.ben-manes.caffeine',name:'caffeine', version: caffeineVersion],

]
Task caffeineDownloadTask = buildDownloadTask("caffeine", caffeineDependencies, caffeineVersion)
buildJarJarTask(targetDir, caffeineDownloadTask, "caffeine", ["com.github.benmanes.caffeine": "io.micronaut.caffeine"])

// ##########################
// Project JARJAR handling
def jarjarOutputJar = new File(targetDir, "jarjar-output.jar")
def jarjarTask = task("jarjarTask", type: JarjarTask) {
    from(project.files(jar.archivePath))
    classRename "org.objectweb.asm.**", "io.micronaut.asm.@1"
    classRename "com.github.benmanes.caffeine.**", "io.micronaut.caffeine.@1"
    destinationDir = targetDir
    destinationName = jarjarOutputJar.name
}
jarjarTask.dependsOn(jar)

def jarjarOutputs = task("jarjarOutputs").doLast {
    copy {
        from zipTree(jarjarTask.destinationPath)
        into(targetDir)
    }
    delete(jarjarTask.destinationPath)
}

jarjarOutputs.dependsOn(jarjarTask)
task("rejar", type:Jar, dependsOn: jarjarOutputs) {
    from(targetDir)
    archiveName = "rejar.jar"
}

protected Task buildDownloadTask(String name, List dependencies, String version) {
    Task taskAsmDownload = task("${name}Download")
    File downloadDir = new File(project.buildDir, "artifact-download")
    File targetDir = new File(downloadDir, name)
    taskAsmDownload.doLast {
        URI mavenCentralURL = repositories.find(){
            println it.name
            it.name == 'maven'
        }.url
        ant.mkdir(dir:targetDir)
        for(dep in dependencies) {

            ant.get(src:"${mavenCentralURL}/${dep.group.replace('.','/')}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar", dest: targetDir)
        }
    }
    taskAsmDownload.inputs.properties(version: version)
    taskAsmDownload.outputs.dir(targetDir)

    return taskAsmDownload
}

protected void buildJarJarTask(File targetDir, Task jars, String name, Map mappings) {
    File targetJarFile = new File(targetDir, "${name}.jar")
    Task jarjarTask = task("${name}jarjarTask", type: JarjarTask) {
        from(fileTree(jars.outputs.files.first()))
        for(entry in mappings) {
            classRename "${entry.key}.**", "${entry.value}.@1"
        }
        destinationDir = targetDir
        destinationName = targetJarFile.name
    }
    jarjarTask.inputs.files(jars)
    jarjarTask.outputs.files(targetJarFile)

    Task jarjarOutput = task("${name}jarjarOutput")
    jarjarOutput.doLast {
        copy {
            from(zipTree(targetJarFile)) {
                for(v in mappings.values())
                    include "${v.replace('.','/')}/**"
            }
            into(new File(project.buildDir, "classes/java/main"))
        }
    }
    jarjarOutput.dependsOn(jarjarTask)
    classes {
        dependsOn(jarjarOutput)
    }
}