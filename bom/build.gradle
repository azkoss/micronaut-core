import java.util.regex.Pattern

Pattern pattern = Pattern.compile("([\\w\\-.]+):([\\w\\-]+):([\\w\\-.]+)")

List<String> excludedDependencies = [
    'caffeine', 'yaml', 'lombok', 'cglib', 'asm', 'gormCore', 'gormDatastore', 'gormHibernate5', 'grailsDocs',
    'groovyTest', 'groovyAnt', 'groovyJson', 'groovyJmx', 'jacksonAfterburner', 'jacksonDatatypeJdk8',
    'jacksonDatatypeJsr310', 'lettuce', 'reactor', 'rxJavaInterop', 'rxJava1', 'slf4jSimple', 'slf4jApi', 'spock',
    'neo4j', 'hystrixCore', 'hystrixSerialization', 'mongoDriver', 'mongoDriverAsync',
]

publishing {
    publications {
        maven(MavenPublication) {
            pom.withXml {
                def xml = asNode()

                def profiles = new Properties()
                profiles.load(new StringReader(new File("$projectDir/profiles.properties").text))

                def parsedDependencies = dependencyVersions
                    .findAll { dep -> !excludedDependencies.any { dep.key.startsWith(it) } }
                    .collect { dep ->
                        def matcher = pattern.matcher((String)dep.value) ; matcher.find()
                        [name: dep.key, group: matcher.group(1), artifact: matcher.group(2),  version: matcher.group(3)]
                    }

                xml.children().last() + {
                    def mkp = delegate

                    mkp.properties {
                        for (dep in parsedDependencies) {
                            mkp."${dep.name}.version"(dep.version)
                        }
                    }

                    mkp.dependencyManagement {
                        mkp.dependencies {

                            for (profile in profiles) {
                                mkp.dependency {
                                    mkp.groupId 'io.micronaut.profiles'
                                    mkp.artifactId profile.key
                                    def version = profile.value
                                    if (!isBuildSnapshot && version.toString().endsWith("-SNAPSHOT")) {
                                        throw new RuntimeException("Cannot have a snapshot dependency on a profile [$profile.key] for a release!")
                                    }
                                    mkp.version(version)
                                }
                            }

                            for (Project p : rootProject.subprojects) {
                                if (p.name == "configurations") continue
                                if (p.name.contains("test-suite")) continue
                                if (p.name == "examples") continue
                                if (p.name == "bom") continue

                                mkp.dependency {
                                    mkp.groupId p.group
                                    mkp.artifactId p.name
                                    mkp.version p.version
                                }
                            }

                            for (dep in parsedDependencies) {
                                mkp.dependency {
                                    mkp.groupId dep.group
                                    mkp.artifactId dep.artifact
                                    mkp.version "\${${dep.name}.version}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}