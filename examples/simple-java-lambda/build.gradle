import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask
import com.amazonaws.services.lambda.model.Runtime

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        mavenLocal()

    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.22"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id "de.sebastianboegl.shadow.transformer.log4j" version "2.1.1"
    id 'java'
    id "application"
}

apply plugin: 'jp.classmethod.aws.lambda'

//mainClassName = "io.micronaut.function.executor.FunctionApplication"
mainClassName = "example.UpperCaseTitleFunction"
applicationDefaultJvmArgs = [""]
jar {
    manifest {
//        attributes 'Main-Class': "io.micronaut.function.executor.FunctionApplication"
        attributes 'Main-Class': "example.UpperCaseTitleFunction"
    }
}
repositories {
    mavenLocal()
    mavenCentral()
}
dependencies {
    compileOnly "io.micronaut:inject-java:${projectVersion}"
    compile "io.micronaut:function-aws:${projectVersion}"
    runtime "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.9.1'


    testRuntime "io.micronaut:http-server-netty:${projectVersion}"
    testRuntime "io.micronaut:function-web:${projectVersion}"
    testCompile 'junit:junit:4.12'
    testCompile 'com.squareup.okhttp3:okhttp:3.8.1'
}
shadowJar {
    mergeServiceFiles()
}

task deploy(type: AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
    functionName = "particle-function"
//  To deploy MicronautRequestStreamHandler uncomment function-aws dependency
//  handler = "io.micronaut.function.aws.MicronautRequestStreamHandler"
    handler = "example.UpperCaseTitleFunction::toUpperCase"
    role = "arn:aws:iam::${aws.accountId}:role/lambda_basic_execution"
    runtime = Runtime.Java8
    zipFile = shadowJar.archivePath
    memorySize = 512
    timeout = 60
}
