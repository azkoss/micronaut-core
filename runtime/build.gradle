apply plugin: 'com.github.johnrengelman.plugin-shadow'

dependencies {
    for(proj in ['inject', 'http', 'aop']) {
        shadowCompile project(":$proj")
        compile project(":$proj")
    }

    shadowCompile dependencyVersions.validation
    shadowCompile dependencyVersions.jacksonDatabind
    shadowCompile dependencyVersions.rxJava2

    compile dependencyVersions.validation
    compile dependencyVersions.jacksonDatabind
    compile dependencyVersions.rxJava2

    shadowRuntime([
        dependencyVersions.jacksonDatatypeJdk8,
        dependencyVersions.jacksonDatatypeJsr310
    ])
    runtime([
        dependencyVersions.jacksonDatatypeJdk8,
        dependencyVersions.jacksonDatatypeJsr310
    ])

    compileOnly 'org.glassfish:javax.el:3.0.1-b09'
    compileOnly dependencyVersions.reactor
    compileOnly dependencyVersions.rxJavaInterop
    compileOnly dependencyVersions.caffeine
    compileOnly project(":inject-java")

    testCompile dependencyVersions.rxJavaInterop
    testCompile dependencyVersions.reactor
    testCompile project(":inject-java")
    testCompile project(":inject-groovy")

    testCompile dependencyVersions.gormDatastore
}

shadowJar {
    dependencies {
        for(dep in project.configurations.shadowCompile.dependencies + project.configurations.shadowRuntime.dependencies) {
            if(dep instanceof ProjectDependency) {
                exclude(project(":$dep.name"))
            }
            else if(dep instanceof ExternalDependency) {
                exclude(dependency("$dep.group:$dep.name:.*"))
            }
        }
        exclude(project(":core"))
        exclude(dependency("com.fasterxml.*:.*:.*"))
        exclude(dependency(dependencyVersions.slf4jApi))
        exclude(dependency(group: 'javax.inject', name: 'javax.inject', version: '1'))
        exclude(dependency('org.ow2.asm:.*:.*'))
        exclude(dependency('org.reactivestreams:.*:.*'))
        exclude(dependency('com.google.code.findbugs:.*:.*'))
        exclude(dependency('com.github.ben-manes.caffeine:.*:.*'))
    }

    relocate "org.objectweb.asm", "io.micronaut.asm"
    relocate "com.github.benmanes.caffeine", "io.micronaut.caffeine"

}
tasks.withType(com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation) { t ->
    t.enabled = false
}

//compileTestGroovy.groovyOptions.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']